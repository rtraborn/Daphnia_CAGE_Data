
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #creates a series of plots relating to differential expression analysis
> # uses the bioconductor package 'limma'
> 
> require("CAGEr")
Loading required package: CAGEr
Loading required package: BSgenome
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:stats’:

    xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, as.vector, cbind, colnames,
    do.call, duplicated, eval, evalq, Filter, Find, get, intersect,
    is.unsorted, lapply, Map, mapply, match, mget, order, paste, pmax,
    pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rep.int,
    rownames, sapply, setdiff, sort, table, tapply, union, unique,
    unlist, unsplit

Loading required package: S4Vectors
Loading required package: stats4
Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: XVector
Loading required package: rtracklayer
> require("limma")
Loading required package: limma

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

> require("edgeR")
Loading required package: edgeR
> require("Biobase")
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> require("gplots")
Loading required package: gplots

Attaching package: ‘gplots’

The following object is masked from ‘package:rtracklayer’:

    space

The following object is masked from ‘package:IRanges’:

    space

The following object is masked from ‘package:stats’:

    lowess

> require(GenomicRanges)
> require(GenomicFeatures)
Loading required package: GenomicFeatures
Loading required package: AnnotationDbi
> 
> #importing the Dp CAGEr object
> load("/home/rtraborn/Daphnia/Daphnia_CAGE_Data/R_analysis/promoter_calling_pipelines/Dp_TCO.RData")
> 
> #CAGE data based expression clustering
> getExpressionProfiles(myCAGEset, what = "consensusClusters",
+                       tpmThreshold = 10, nrPassThreshold = 1,
+                       method = "som", xDim = 4, yDim = 4
+                       )
> 
> 
> plotExpressionProfiles(myCAGEset, what= "consensusClusters")

File 'consensusClusters_expression_profiles.pdf' has been created in your working directory (/home/rtraborn/Daphnia/Daphnia_CAGE_Data/R_analysis/expression_analysis)
> 
> #creating a count table
> Dp_edger <- myCAGEset@consensusClustersTpmMatrix
> 
> #creating identifier for each tag cluster
> Dp_edger_consensus_cluster <- consensusClusters(myCAGEset)
> rownames(Dp_edger) <- paste(Dp_edger_consensus_cluster$chr,
+ 					Dp_edger_consensus_cluster$start,
+ 					Dp_edger_consensus_cluster$end,
+ 					Dp_edger_consensus_cluster$strand,
+ 					sep="_")
> 
> 
> dp_eset <-new("ExpressionSet", exprs=as.matrix(Dp_edger))
> 
> head(dp_eset)
ExpressionSet (storageMode: lockedEnvironment)
assayData: 1 features, 8 samples 
  element names: exprs 
protocolData: none
phenoData: none
featureData: none
experimentData: use 'experimentData(object)'
Annotation:  
> 
> #checking to see what the data frame looks like
> head(Dp_edger)
                            sample
consensus.cluster            mat_females_1 mat_females_2 mat_females_3
  scaffold_1_36116_36124_+        5.434379      0.000000      0.000000
  scaffold_1_51155_51224_+       29.238488     27.329136     26.896134
  scaffold_1_100766_100796_+    131.113953    109.585795    122.690582
  scaffold_1_120715_120736_+      8.342919      5.250425      9.487335
  scaffold_1_123356_123357_+      0.000000      0.000000      6.263483
  scaffold_1_157386_157461_+     37.811029     34.733581     33.159617
                            sample
consensus.cluster            mat_males_1 mat_males_2 pE_females_1 pE_females_2
  scaffold_1_36116_36124_+      0.000000    0.000000     0.000000     0.000000
  scaffold_1_51155_51224_+     17.878433   26.329169    31.822582    23.987680
  scaffold_1_100766_100796_+  150.689648  172.957300   157.398563   112.348548
  scaffold_1_120715_120736_+    8.300701   13.550158     5.143044     5.247305
  scaffold_1_123356_123357_+    0.000000    9.033439     0.000000     6.559131
  scaffold_1_157386_157461_+   16.856808   12.668847    18.643533    20.895518
                            sample
consensus.cluster            pE_females_3
  scaffold_1_36116_36124_+       0.000000
  scaffold_1_51155_51224_+      35.083423
  scaffold_1_100766_100796_+   153.359715
  scaffold_1_120715_120736_+    10.073458
  scaffold_1_123356_123357_+     8.162975
  scaffold_1_157386_157461_+    17.020671
> 
> lib_sizes <- librarySizes(myCAGEset)
> design <- model.matrix(~0+factor(c(1,1,1,3,3,2,2,2)))
> colnames(design) <- c("mat_fem", "pE_fem", "mat_male")
> design
  mat_fem pE_fem mat_male
1       1      0        0
2       1      0        0
3       1      0        0
4       0      0        1
5       0      0        1
6       0      1        0
7       0      1        0
8       0      1        0
attr(,"assign")
[1] 1 1 1
attr(,"contrasts")
attr(,"contrasts")$`factor(c(1, 1, 1, 3, 3, 2, 2, 2))`
[1] "contr.treatment"

> 
> contrasts.matrix <- makeContrasts(
+     MvMf=mat_male-mat_fem,
+     pEvM=pE_fem-mat_male,
+     MfvpE=mat_fem-pE_fem,
+     MvF=mat_male-(mat_fem+pE_fem)/2,
+     AvS=mat_fem-(mat_fem+pE_fem)/2,
+     levels=design)
> 
> contrasts.matrix
          Contrasts
Levels     MvMf pEvM MfvpE  MvF  AvS
  mat_fem    -1    0     1 -0.5  0.5
  pE_fem      0    1    -1 -0.5 -0.5
  mat_male    1   -1     0  1.0  0.0
> 
> group <- c(rep("mat_fem",3),rep("mat_male",2),rep("pE_fem",3))
> 
> p_cutoff <- 0.01
> rowsum_threshold <- 20
> 
> Dp_dge <- DGEList(counts=Dp_edger,group=group)
> head(Dp_dge)
An object of class "DGEList"
$counts
                            sample
consensus.cluster            mat_females_1 mat_females_2 mat_females_3
  scaffold_1_36116_36124_+        5.434379      0.000000      0.000000
  scaffold_1_51155_51224_+       29.238488     27.329136     26.896134
  scaffold_1_100766_100796_+    131.113953    109.585795    122.690582
  scaffold_1_120715_120736_+      8.342919      5.250425      9.487335
  scaffold_1_123356_123357_+      0.000000      0.000000      6.263483
  scaffold_1_157386_157461_+     37.811029     34.733581     33.159617
                            sample
consensus.cluster            mat_males_1 mat_males_2 pE_females_1 pE_females_2
  scaffold_1_36116_36124_+      0.000000    0.000000     0.000000     0.000000
  scaffold_1_51155_51224_+     17.878433   26.329169    31.822582    23.987680
  scaffold_1_100766_100796_+  150.689648  172.957300   157.398563   112.348548
  scaffold_1_120715_120736_+    8.300701   13.550158     5.143044     5.247305
  scaffold_1_123356_123357_+    0.000000    9.033439     0.000000     6.559131
  scaffold_1_157386_157461_+   16.856808   12.668847    18.643533    20.895518
                            sample
consensus.cluster            pE_females_3
  scaffold_1_36116_36124_+       0.000000
  scaffold_1_51155_51224_+      35.083423
  scaffold_1_100766_100796_+   153.359715
  scaffold_1_120715_120736_+    10.073458
  scaffold_1_123356_123357_+     8.162975
  scaffold_1_157386_157461_+    17.020671

$samples
                 group lib.size norm.factors
mat_females_1  mat_fem 856781.7            1
mat_females_2  mat_fem 862365.6            1
mat_females_3  mat_fem 850101.8            1
mat_males_1   mat_male 884816.7            1
mat_males_2   mat_male 865513.4            1
pE_females_1    pE_fem 877201.0            1
pE_females_2    pE_fem 878521.2            1
pE_females_3    pE_fem 883811.7            1

> A <- rowSums(Dp_dge$counts) 
> Dp_dge <- Dp_dge[A>rowsum_threshold,]  
> #Dp_dge <- calcNormFactors(Dp_dge)
> Dp_dge <- estimateCommonDisp(Dp_dge, verbose=T)
Disp = 0.03143 , BCV = 0.1773 
> Dp_dge <- estimateTagwiseDisp(Dp_dge, trend="none")
> 
> plotBCV(Dp_dge)
> 
> Dp_dge <- calcNormFactors(Dp_dge)
> 
> v <- voom(Dp_dge, design, plot=TRUE)
> fit <- lmFit(v,design)
> fit2 <- contrasts.fit(fit,contrasts.matrix)
> fit2 <- eBayes(fit2)
> res <- decideTests(fit2,p.value=0.01,lfc=log2(2))
> ind = which(apply(res,1,function(x) {length(which(x != 0))>0}) == T)
> length(ind)
[1] 2317
> 
> head(res)
                            Contrasts
                             MvMf pEvM MfvpE MvF AvS
  scaffold_1_51155_51224_+      0    0     0   0   0
  scaffold_1_100766_100796_+    0    0     0   0   0
  scaffold_1_120715_120736_+    0    0     0   0   0
  scaffold_1_123356_123357_+    0    0     0   0   0
  scaffold_1_157386_157461_+   -1    0     0   0   0
  scaffold_1_162014_162063_+   -1    0     0  -1   0
> 
> options(digits=3)
> de_table1 <- topTable(fit2, coef=1, sort="none",adjust.method="BH",n=Inf)
> head(de_table1)
                            logFC AveExpr      t  P.Value adj.P.Val     B
scaffold_1_51155_51224_+   -0.186    4.98 -0.826 0.434216   0.53922 -7.02
scaffold_1_100766_100796_+  0.581    7.31  3.095 0.015912   0.04290 -3.98
scaffold_1_120715_120736_+  0.644    3.25  1.745 0.121523   0.19818 -5.26
scaffold_1_123356_123357_+  1.033    1.19  0.479 0.645806   0.73412 -5.40
scaffold_1_157386_157461_+ -1.073    4.72 -6.961 0.000156   0.00203  1.13
scaffold_1_162014_162063_+ -4.036    2.20 -5.066 0.001164   0.00681 -1.11
> de_table2 <- topTable(fit2, coef=2, sort="none",adjust.method="BH",n=Inf)
> head(de_table2)
                            logFC AveExpr      t P.Value adj.P.Val     B
scaffold_1_51155_51224_+    0.473    4.98  2.110 0.06994    0.1561 -5.36
scaffold_1_100766_100796_+ -0.190    7.31 -1.009 0.34407    0.4799 -6.86
scaffold_1_120715_120736_+ -0.652    3.25 -1.596 0.15142    0.2701 -5.31
scaffold_1_123356_123357_+  0.568    1.19  0.317 0.76006    0.8426 -5.56
scaffold_1_157386_157461_+  0.371    4.72  2.308 0.05179    0.1266 -4.95
scaffold_1_162014_162063_+  3.797    2.20  4.690 0.00184    0.0133 -1.50
> de_table3 <- topTable(fit2, coef=3, sort="none",adjust.method="BH",n=Inf)
> head(de_table3)
                              logFC AveExpr      t  P.Value adj.P.Val      B
scaffold_1_51155_51224_+   -0.28704    4.98 -1.481 0.179050   0.30293 -6.162
scaffold_1_100766_100796_+ -0.39123    7.31 -2.341 0.049278   0.12390 -4.968
scaffold_1_120715_120736_+  0.00804    3.25  0.018 0.986116   0.99069 -6.210
scaffold_1_123356_123357_+ -1.60127    1.19 -0.861 0.416038   0.55213 -5.071
scaffold_1_157386_157461_+  0.70240    4.72  5.517 0.000692   0.00705 -0.401
scaffold_1_162014_162063_+  0.23804    2.20  0.956 0.368597   0.50701 -5.798
> de_table4 <- topTable(fit2, coef=4, sort="none", adjust.method="BH",n=Inf)
> de_table5 <- topTable(fit2, coef=5, sort="none", adjust.method="BH",n=Inf)
> 
> plotMDS(v, labels=c("mf1","mf2","mf3","m1","m2","pE1","pE2","pE3"), main="MDS plot for all eight libraries")
> volcanoplot(fit2,coef=1,highlight=20)
> volcanoplot(fit2,coef=2,highlight=20)
> volcanoplot(fit2,coef=3,highlight=20)
> volcanoplot(fit2,coef=4,highlight=20)
> volcanoplot(fit2,coef=5,highlight=20)
> 
> #results <- decideTests(fit2)
> #vennDiagram(results, names=c("Asexual females","Sexual females","Sexual Males"),include="up",circle.col=c("green","red","blue"))
> 
> #top_table2 <- cbind(top_table,results)
> #write.table(top_table2,file="de_TCO_combined_table.txt", row.names=TRUE,quote=FALSE)
> 
> ################################### mat females vs pE females ############################
> 
> de_data <- Dp_dge$pseudo.counts
> 
> #differential analysis results
> de_data <- cbind(de_data, de_table1)
> 
> #calculating the false discovery rate
> de_data$FDR <- p.adjust(de_data$P.Value, method = 'BH')
> 
> #dispersion of each tag cluster
> de_data$tw_dis <- Dp_dge$tagwise.dispersion
> 
> #coordinates of each tag cluster
> data_coord2 <- matrix(data=unlist(strsplit(rownames(de_data), split="_")),
+                       nrow= length(row.names(de_data)),
+                       byrow=T)
> data_coord2 <- as.data.frame(data_coord2, stringsAsFactors=F)
> head(data_coord2)
        V1 V2     V3     V4 V5
1 scaffold  1  51155  51224  +
2 scaffold  1 100766 100796  +
3 scaffold  1 120715 120736  +
4 scaffold  1 123356 123357  +
5 scaffold  1 157386 157461  +
6 scaffold  1 162014 162063  +
> 
> col_1 <- data_coord2[,1]
> col_2 <- data_coord2[,2]
> chr_col <- paste(col_1,col_2,sep="_")
> data_coord2 <- data_coord2[,-2]
> data_coord2[,1] <- chr_col
> names(data_coord2) <- c('chr','start','end','strand')
> 
> #coordinates of each tag cluster
> de_data <- cbind(de_data, data_coord2)
> 
> #create column for differential expression status
> #1 for DE and 0 for not
> de_data$de <- as.numeric(de_data$FDR<p_cutoff)
> 
> #convert coordinates to numeric
> de_data$start <- as.numeric(de_data$start)
> de_data$end <- as.numeric(de_data$end)
> 
> de_data1 <- de_data
> 
> write.table(de_data1,file="TCO_male_v_mat_fem_de.txt",col.names=TRUE,quote=FALSE)
> 
> ################################### pE females vs males ############################
> 
> de_data <- Dp_dge$pseudo.counts
> 
> #differential analysis results
> de_data <- cbind(de_data, de_table2)
> 
> de_data$FDR <- p.adjust(de_data$P.Value, method = 'BH')
> 
> #dispersion of each tag cluster
> de_data$tw_dis <- Dp_dge$tagwise.dispersion
> 
> #coordinates of each tag cluster
> data_coord2 <- matrix(data=unlist(strsplit(rownames(de_data), split="_")),
+                       nrow= length(row.names(de_data)),
+                       byrow=T)
> data_coord2 <- as.data.frame(data_coord2, stringsAsFactors=F)
> head(data_coord2)
        V1 V2     V3     V4 V5
1 scaffold  1  51155  51224  +
2 scaffold  1 100766 100796  +
3 scaffold  1 120715 120736  +
4 scaffold  1 123356 123357  +
5 scaffold  1 157386 157461  +
6 scaffold  1 162014 162063  +
> 
> col_1 <- data_coord2[,1]
> col_2 <- data_coord2[,2]
> chr_col <- paste(col_1,col_2,sep="_")
> data_coord2 <- data_coord2[,-2]
> data_coord2[,1] <- chr_col
> names(data_coord2) <- c('chr','start','end','strand')
> 
> #coordinates of each tag cluster
> de_data <- cbind(de_data, data_coord2)
> 
> #create column for differential expression status
> #1 for DE and 0 for not
> de_data$de <- as.numeric(de_data$FDR<p_cutoff)
> 
> #convert coordinates to numeric
> de_data$start <- as.numeric(de_data$start)
> de_data$end <- as.numeric(de_data$end)
> 
> de_data2 <- de_data
> 
> write.table(de_data2,file="TCO_pE_v_males_de.txt",col.names=TRUE,quote=FALSE)
> 
> ###################################  asexual females vs pE_fem  ############################
> 
> de_data <- Dp_dge$pseudo.counts
> 
> #differential analysis results
> de_data <- cbind(de_data, de_table3)
> 
> #calculating the FDR
> de_data$FDR <- p.adjust(de_data$P.Value, method = 'BH')
> 
> #dispersion of each tag cluster
> de_data$tw_dis <- Dp_dge$tagwise.dispersion
> 
> #coordinates of each tag cluster
> data_coord2 <- matrix(data=unlist(strsplit(rownames(de_data), split="_")),
+                       nrow= length(row.names(de_data)),
+                       byrow=T)
> 
> data_coord2 <- as.data.frame(data_coord2, stringsAsFactors=F)
> head(data_coord2)
        V1 V2     V3     V4 V5
1 scaffold  1  51155  51224  +
2 scaffold  1 100766 100796  +
3 scaffold  1 120715 120736  +
4 scaffold  1 123356 123357  +
5 scaffold  1 157386 157461  +
6 scaffold  1 162014 162063  +
> 
> col_1 <- data_coord2[,1]
> col_2 <- data_coord2[,2]
> chr_col <- paste(col_1,col_2,sep="_")
> data_coord2 <- data_coord2[,-2]
> data_coord2[,1] <- chr_col
> names(data_coord2) <- c('chr','start','end','strand')
> 
> #coordinates of each tag cluster
> de_data <- cbind(de_data, data_coord2)
> 
> #create column for differential expression status
> #1 for DE and 0 for not
> de_data$de <- as.numeric(de_data$FDR<p_cutoff)
> 
> #convert coordinates to numeric
> de_data$start <- as.numeric(de_data$start)
> de_data$end <- as.numeric(de_data$end)
> 
> de_data3 <- de_data
> 
> write.table(de_data3,file="TCO_matfem_v_pE_de.txt",col.names=TRUE,quote=FALSE)
> ###################################  Males vs Females  ############################
> 
> de_data <- Dp_dge$pseudo.counts
> 
> #differential analysis results
> de_data <- cbind(de_data, de_table4)
> 
> #calculating the FDR
> de_data$FDR <- p.adjust(de_data$P.Value, method = 'BH')
> 
> #dispersion of each tag cluster
> de_data$tw_dis <- Dp_dge$tagwise.dispersion
> 
> #coordinates of each tag cluster
> data_coord2 <- matrix(data=unlist(strsplit(rownames(de_data), split="_")),
+                       nrow= length(row.names(de_data)),
+                       byrow=T)
> 
> data_coord2 <- as.data.frame(data_coord2, stringsAsFactors=F)
> head(data_coord2)
        V1 V2     V3     V4 V5
1 scaffold  1  51155  51224  +
2 scaffold  1 100766 100796  +
3 scaffold  1 120715 120736  +
4 scaffold  1 123356 123357  +
5 scaffold  1 157386 157461  +
6 scaffold  1 162014 162063  +
> 
> col_1 <- data_coord2[,1]
> col_2 <- data_coord2[,2]
> chr_col <- paste(col_1,col_2,sep="_")
> data_coord2 <- data_coord2[,-2]
> data_coord2[,1] <- chr_col
> names(data_coord2) <- c('chr','start','end','strand')
> 
> #coordinates of each tag cluster
> de_data <- cbind(de_data, data_coord2)
> 
> #create column for differential expression status
> #1 for DE and 0 for not
> de_data$de <- as.numeric(de_data$FDR<p_cutoff)
> 
> #convert coordinates to numeric
> de_data$start <- as.numeric(de_data$start)
> de_data$end <- as.numeric(de_data$end)
> 
> de_data4 <- de_data
> 
> write.table(de_data4,file="TCO_male_v_females_de.txt",col.names=TRUE,quote=FALSE)
> 
> ###################################  Asexual vs Sexuals  ############################
> 
> de_data <- Dp_dge$pseudo.counts
> 
> #differential analysis results
> de_data <- cbind(de_data, de_table5)
> 
> #calculating the FDR
> de_data$FDR <- p.adjust(de_data$P.Value, method = 'BH')
> 
> #dispersion of each tag cluster
> de_data$tw_dis <- Dp_dge$tagwise.dispersion
> 
> #coordinates of each tag cluster
> data_coord2 <- matrix(data=unlist(strsplit(rownames(de_data), split="_")),
+                       nrow= length(row.names(de_data)),
+                       byrow=T)
> 
> data_coord2 <- as.data.frame(data_coord2, stringsAsFactors=F)
> head(data_coord2)
        V1 V2     V3     V4 V5
1 scaffold  1  51155  51224  +
2 scaffold  1 100766 100796  +
3 scaffold  1 120715 120736  +
4 scaffold  1 123356 123357  +
5 scaffold  1 157386 157461  +
6 scaffold  1 162014 162063  +
> 
> col_1 <- data_coord2[,1]
> col_2 <- data_coord2[,2]
> chr_col <- paste(col_1,col_2,sep="_")
> data_coord2 <- data_coord2[,-2]
> data_coord2[,1] <- chr_col
> names(data_coord2) <- c('chr','start','end','strand')
> 
> #coordinates of each tag cluster
> de_data <- cbind(de_data, data_coord2)
> 
> #create column for differential expression status
> #1 for DE and 0 for not
> de_data$de <- as.numeric(de_data$FDR<p_cutoff)
> 
> #convert coordinates to numeric
> de_data$start <- as.numeric(de_data$start)
> de_data$end <- as.numeric(de_data$end)
> 
> de_data5 <- de_data
> 
> write.table(de_data5,file="TCO_asexual_v_sexuals_de.txt",col.names=TRUE,quote=FALSE)
> 
> ####################################
> 
> #Adding gene annotation to promoters
> 
> #importing the gene annotation file (only need to do this a single time)
> dpulex_genes <- read.table(file="/home/rtraborn/Daphnia/Daphnia_CAGE_Data/gene_annotations/dpulex_genes.bed", header=FALSE)
> names(dpulex_genes) <- c("chr","start","end","geneID","score","strand","version","type","placeholder","ID2")
> 
> #create GRanges object for all genes
> genes_GR <- with(dpulex_genes, GRanges(chr, IRanges(start, end, names=geneID),strand))
> 
> #################################### pE vs males ########################################
> 
> #next, creating a genomicRanges object from the promoter data
> de_GR <- with(de_data1, GRanges(chr,
+                                     IRanges(start, end, names=row.names(de_data1)), strand))
> 
> de_GR <- promoters(de_GR, upstream=200, downstream=200)
> 
> #de_GR #for debugging
> 
> #overlap TSRs with all tag clusters
> tc_overlaps <- findOverlaps(de_GR, genes_GR)
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': scaffold_10571, scaffold_10851, scaffold_12610, scaffold_3096, scaffold_3677, scaffold_5023, scaffold_589, scaffold_6071, scaffold_6561, scaffold_6994, scaffold_718, scaffold_7194, scaffold_9449, scaffold_2516, scaffold_5600
  - in 'y': scaffold_1000, scaffold_10005, scaffold_10008, scaffold_10014, scaffold_10017, scaffold_1002, scaffold_1003, scaffold_10031, scaffold_10032, scaffold_10033, scaffold_10034, scaffold_10049, scaffold_10053, scaffold_1007, scaffold_10071, scaffold_10077, scaffold_10096, scaffold_10098, scaffold_1010, scaffold_1011, scaffold_1012, scaffold_10124, scaffold_10129, scaffold_1013, scaffold_10131, scaffold_10134, scaffold_1014, scaffold_10140, scaffold_10142, scaffold_1015, scaffold_10161, scaffold_10167, scaffold_1017, scaffold_1018, scaffold_10183, scaffold_10189, scaffold_1019, scaffold_1020, scaffold_10201, scaffold_1021, scaffold_10227, scaffold_1023, scaffold_10236, scaffold_1 [... truncated]
> 
> #store number of overlaps
> #tc_overlaps_count <- countOverlaps(de_GR, genes_GR)
> 
> match_hit2 <- as.data.frame(tc_overlaps)
> 
> #name the columns
> names(match_hit2) <- c('query','subject')
> 
> #head(match_hit2)
> 
> promoter_index <- match_hit2$query
> gene_index <- match_hit2$subject
> 
> print("Length of promoter index")
[1] "Length of promoter index"
> length(promoter_index)
[1] 6921
> 
> #gene_names <- dpulex_genes[gene_index,'geneID']
> promoter_table <- data.frame(de_data1[promoter_index,])
> gene_IDs <- dpulex_genes[gene_index,"geneID"]
> promoter_table$gene <- gene_IDs
> 
> #remove duplicated entries
> #match_hit2 <- match_hit2[!duplicated(match_hit2$query),]
> 
> de_index <- which(promoter_table$FDR<0.01)
> length(de_index)
[1] 1431
> promoter_table <- promoter_table[de_index,]
> 
> write.table(promoter_table,file="TCO_MvMf_de_table_genes.txt",col.names=TRUE, row.names=TRUE)
> 
> #################################### pE vs asexual females  ########################################
> 
> #creating a genomicRanges object from the promoter data
> de_GR <- with(de_data2, GRanges(chr,
+                                     IRanges(start, end, names=row.names(de_data2)), strand))
> 
> de_GR <- promoters(de_GR, upstream=200, downstream=200)
> 
> #de_GR #for debugging
> 
> #overlap TSRs with all tag clusters
> tc_overlaps <- findOverlaps(de_GR, genes_GR)
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': scaffold_10571, scaffold_10851, scaffold_12610, scaffold_3096, scaffold_3677, scaffold_5023, scaffold_589, scaffold_6071, scaffold_6561, scaffold_6994, scaffold_718, scaffold_7194, scaffold_9449, scaffold_2516, scaffold_5600
  - in 'y': scaffold_1000, scaffold_10005, scaffold_10008, scaffold_10014, scaffold_10017, scaffold_1002, scaffold_1003, scaffold_10031, scaffold_10032, scaffold_10033, scaffold_10034, scaffold_10049, scaffold_10053, scaffold_1007, scaffold_10071, scaffold_10077, scaffold_10096, scaffold_10098, scaffold_1010, scaffold_1011, scaffold_1012, scaffold_10124, scaffold_10129, scaffold_1013, scaffold_10131, scaffold_10134, scaffold_1014, scaffold_10140, scaffold_10142, scaffold_1015, scaffold_10161, scaffold_10167, scaffold_1017, scaffold_1018, scaffold_10183, scaffold_10189, scaffold_1019, scaffold_1020, scaffold_10201, scaffold_1021, scaffold_10227, scaffold_1023, scaffold_10236, scaffold_1 [... truncated]
> 
> #store number of overlaps
> #tc_overlaps_count <- countOverlaps(de_GR, genes_GR)
> 
> match_hit2 <- as.data.frame(tc_overlaps)
> 
> #name the columns
> names(match_hit2) <- c('query','subject')
> 
> #head(match_hit2)
> 
> promoter_index <- match_hit2$query
> gene_index <- match_hit2$subject
> 
> print("Length of promoter index")
[1] "Length of promoter index"
> length(promoter_index)
[1] 6921
> 
> #gene_names <- dpulex_genes[gene_index,'geneID']
> promoter_table <- data.frame(de_data2[promoter_index,])
> gene_IDs <- dpulex_genes[gene_index,"geneID"]
> promoter_table$gene <- gene_IDs
> 
> #remove duplicated entries
> #match_hit2 <- match_hit2[!duplicated(match_hit2$query),]
> 
> de_index <- which(promoter_table$FDR<0.01)
> length(de_index)
[1] 657
> promoter_table <- promoter_table[de_index,]
> 
> write.table(promoter_table,file="TCO_pEvM_de_table_genes.txt",col.names=TRUE, row.names=TRUE)
> 
> #################################### pE vs asexual females  ########################################
> 
> #creating a genomicRanges object from the promoter data
> de_GR <- with(de_data3, GRanges(chr,
+                                     IRanges(start, end, names=row.names(de_data3)), strand))
> 
> de_GR <- promoters(de_GR, upstream=200, downstream=200)
> 
> #de_GR #for debugging
> 
> #overlap TSRs with all tag clusters
> tc_overlaps <- findOverlaps(de_GR, genes_GR)
Warning message:
In .Seqinfo.mergexy(x, y) :
  Each of the 2 combined objects has sequence levels not in the other:
  - in 'x': scaffold_10571, scaffold_10851, scaffold_12610, scaffold_3096, scaffold_3677, scaffold_5023, scaffold_589, scaffold_6071, scaffold_6561, scaffold_6994, scaffold_718, scaffold_7194, scaffold_9449, scaffold_2516, scaffold_5600
  - in 'y': scaffold_1000, scaffold_10005, scaffold_10008, scaffold_10014, scaffold_10017, scaffold_1002, scaffold_1003, scaffold_10031, scaffold_10032, scaffold_10033, scaffold_10034, scaffold_10049, scaffold_10053, scaffold_1007, scaffold_10071, scaffold_10077, scaffold_10096, scaffold_10098, scaffold_1010, scaffold_1011, scaffold_1012, scaffold_10124, scaffold_10129, scaffold_1013, scaffold_10131, scaffold_10134, scaffold_1014, scaffold_10140, scaffold_10142, scaffold_1015, scaffold_10161, scaffold_10167, scaffold_1017, scaffold_1018, scaffold_10183, scaffold_10189, scaffold_1019, scaffold_1020, scaffold_10201, scaffold_1021, scaffold_10227, scaffold_1023, scaffold_10236, scaffold_1 [... truncated]
> 
> #store number of overlaps
> #tc_overlaps_count <- countOverlaps(de_GR, genes_GR)
> 
> match_hit2 <- as.data.frame(tc_overlaps)
> 
> #name the columns
> names(match_hit2) <- c('query','subject')
> 
> #head(match_hit2)
> 
> promoter_index <- match_hit2$query
> gene_index <- match_hit2$subject
> 
> print("Length of promoter index")
[1] "Length of promoter index"
> length(promoter_index)
[1] 6921
> 
> #gene_names <- dpulex_genes[gene_index,'geneID']
> promoter_table <- data.frame(de_data3[promoter_index,])
> gene_IDs <- dpulex_genes[gene_index,"geneID"]
> promoter_table$gene <- gene_IDs
> 
> #remove duplicated entries
> #match_hit2 <- match_hit2[!duplicated(match_hit2$query),]
> 
> de_index <- which(promoter_table$FDR <0.01)
> length(de_index)
[1] 781
> promoter_table <- promoter_table[de_index,]
> 
> write.table(promoter_table,file="TCO_MfvpE_de_table_genes.txt",col.names=TRUE, row.names=TRUE)
> 
> ####################################
> 
> #number of differentially-related promoters
> sum(de_data1$FDR<0.01)
[1] 2186
> sum(de_data2$FDR<0.01)
[1] 1119
> sum(de_data3$FDR<0.01)
[1] 1223
> #sum(de_table$B<0.01)
> 
> ################################# Gene Family Analyses ##############################
> 
> #importing the meiosis gene annotation file
> meiosis_genes <- read.table(file="/home/rtraborn/Daphnia/Daphnia_CAGE_Data/development_reg/meiosis/Dpulex_meiosis_genes.bed", header=TRUE)
> meiosis_IDs <- meiosis_genes$geneID
> promoter_list <- promoter_table$gene
> my_index <-  match(meiosis_IDs,promoter_table$gene)
> length(my_index)
[1] 129
> meiosis_table <- promoter_table[my_index,]
> meiosis_table <- na.omit(meiosis_table)
> 
> #differentially-expressed meiosis genes only
> de_index <- which(meiosis_table$de == 1)
> meiosis_de <- meiosis_table[de_index,]
> 
> #head(meiosis_table)
> #write.table(meiosis_table,file="meiosis_table.txt",col.names=TRUE,row.names=TRUE,quote=FALSE)
> write.table(meiosis_de,file="meiosis_table_de.txt",col.names=TRUE,row.names=TRUE,quote=FALSE)
> 
> ##########################################################################
> #importing the gust. receptors  gene annotation file
> gust_genes <- read.table(file="/home/rtraborn/Daphnia/Daphnia_CAGE_Data/development_reg/gustatory_rec/Dpulex_gustatory_receptor_genes.bed", header=TRUE,stringsAsFactors=FALSE)
> rownames(gust_genes) <- gust_genes$geneID
> gust_IDs <- gust_genes$geneID
> head(gust_IDs)
[1] "JGI_V11_95918"  "JGI_V11_311261" "JGI_V11_311262" "JGI_V11_305579"
[5] "JGI_V11_311617" "JGI_V11_311618"
> promoter_list <- unlist(promoter_table$gene)
> promoter_list <- as.character(promoter_list)
> head(promoter_list)
[1] "JGI_V11_219913" "JGI_V11_299784" "JGI_V11_309510" "JGI_V11_219940"
[5] "JGI_V11_299604" "JGI_V11_309533"
> my_index <-  match(gust_IDs,promoter_list)
> length(my_index)
[1] 51
> head(my_index)
[1] NA NA NA NA NA NA
> gustatory_table <- promoter_table[my_index,]
> gustatory_table <- na.omit(gustatory_table)
> head(gustatory_table)
 [1] mat_females_1 mat_females_2 mat_females_3 mat_males_1   mat_males_2  
 [6] pE_females_1  pE_females_2  pE_females_3  logFC         AveExpr      
[11] t             P.Value       adj.P.Val     B             FDR          
[16] tw_dis        chr           start         end           strand       
[21] de            gene         
<0 rows> (or 0-length row.names)
> 
> #differentially-expressed gustatory genes only
> de_index <- which(gustatory_table$de == 1)
> gustatory_de <- gustatory_table[de_index,]
> 
> #write.table(gustatory_table,file="gustatory_table.txt",col.names=TRUE,row.names=TRUE,quote=FALSE)
> #write.table(gustatory_de,file="gustatory_table_de.txt",col.names=TRUE,row.names=TRUE,quote=FALSE)
> 
> ###########################################################################
> #Making heatmaps from the eset data we've generated
> 
> #overall heatmap
> par(mar=c(4.1,4.1,4.1,4.1))
> png(file="all_genes_heatmap.png",height=2800,width=2800)
> selected  <- rownames(de_data1)
> esetSel <- dp_eset[selected,]
> heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE,scale="row", density.info="none",trace="none",
+           key=TRUE,margins=c(10,10))
> dev.off()
pdf 
  2 
> 
> #male vs asexuals
> par(mar=c(4.1,4.1,4.1,4.1))
> png(file="heatmap_TCO_male_v_matfem.png",height=2800,width=2800)
> de_index <- which(de_data1$FDR<0.01)
> length(de_index)
[1] 2186
> de <- de_table1[de_index,]
> selected <- rownames(de)
> esetSel <- dp_eset[selected, ]
> heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE,scale="row", density.info="none",trace="none",
+           key=TRUE,margins=c(10,10))
> dev.off()
pdf 
  2 
> 
> #pE v male
> par(mar=c(4.1,4.1,4.1,4.1))
> png(file="heatmap_TCO_pE_v_male.png",height=2800,width=2800)
> de_index <- which(de_data2$FDR<0.01)
> length(de_index)
[1] 1119
> de <- de_table2[de_index,]
> selected <- rownames(de)
> esetSel <- dp_eset[selected, ]
> heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE,scale="row", density.info="none",trace="none",
+           key=TRUE,margins=c(10,10))
> dev.off()
pdf 
  2 
> 
> #asexuals vs pE
> par(mar=c(4.1,4.1,4.1,4.1))
> png(file="heatmap_TCO_matfem_v_pE.png",height=2800,width=2800)
> de_index <- which(de_data3$FDR<0.01)
> length(de_index)
[1] 1223
> de <- de_table3[de_index,]
> selected <- rownames(de)
> esetSel <- dp_eset[selected, ]
> heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE, scale="row", density.info="none",trace="none",
+          key=TRUE, margins=c(10,10))
> dev.off()
pdf 
  2 
> 
> #male vs both females
> par(mar=c(4.1,4.1,4.1,4.1))
> png(file="heatmap_TCO_males_v_females.png",height=2800,width=2800)
> de_index <- which(de_data4$FDR<0.01)
> length(de_index)
[1] 1913
> de <- de_table4[de_index,]
> selected <- rownames(de)
> esetSel <- dp_eset[selected, ]
> heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE, scale="row", density.info="none",trace="none",
+          key=TRUE, margins=c(10,10))
> dev.off()
pdf 
  2 
> 
> #asexuals vs both sexuals
> par(mar=c(4.1,4.1,4.1,4.1))
> png(file="heatmap_asex_v_sexuals.png",height=2800,width=2800)
> de_index <- which(de_data5$FDR<0.01)
> length(de_index)
[1] 1223
> de <- de_table5[de_index,]
> selected <- rownames(de)
> esetSel <- dp_eset[selected, ]
> heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE, scale="row", density.info="none",trace="none",
+          key=TRUE, margins=c(10,10))
> dev.off()
pdf 
  2 
> 
> #meiosis genes
> par(mar=c(4.1,4.1,4.1,4.1))
> png(file="heatmap_TCO_meiosis.png",height=2800,width=2800)
> meiosis_rows <- match(rownames(meiosis_table), rownames(de_table1))
> length(meiosis_rows)
[1] 11
> head(meiosis_rows)
[1] 2548   NA 8887 1293 9568 2735
> meiosis_rows <- na.omit(meiosis_rows)
> selected  <- rownames(de_data1[meiosis_rows,])
> esetSel <- dp_eset[selected, ]
> heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE, scale="row", density.info="none",trace="none",
+           key=TRUE, margins=c(10,10))
> dev.off()
pdf 
  2 
> 
> #gustatory receptors
> #par(mar=c(4.1,4.1,4.1,4.1))
> #png(file="heatmap_TCO_gust_receptors.png",height=2800,width=2800)
> #gustatory_list <- as.character(rownames(gustatory_table))
> #promoter_list <- as.character(rownames(top_table_e))
> #gustatory_rows <- match(gustatory_list, promoter_list)
> #length(gustatory_rows)
> #head(gustatory_rows)
> #gustatory_rows <- na.omit(gustatory_rows)
> #selected  <- rownames(top_table_e[gustatory_rows])
> #esetSel <- dp_eset[selected, ]
> #heatmap.2(exprs(esetSel), symm=FALSE,symkey=FALSE, scale="row", density.info="none",trace="none",
> #          key=TRUE, margins=c(10,10))
> 
> proc.time()
   user  system elapsed 
 118.02    1.76  120.51 
